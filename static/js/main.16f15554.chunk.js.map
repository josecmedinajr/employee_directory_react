{"version":3,"sources":["components/Card/index.js","components/Employee/index.js","components/Button/index.js","App.js","serviceWorker.js","index.js"],"names":["divStyle","backgroundColor","margin","border","borderRadius","Card","className","style","this","props","name","src","image","alt","role","nationality","department","React","Component","Employee","employees","map","employee","key","id","buttonStyle","fontSize","color","Button","onClick","children","App","state","handleInputChange","event","target","value","setState","sortEmployees","a","b","console","log","personA","toUpperCase","personB","comparison","filterEmployees","filter","sort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6oEAGMA,G,MAAW,CACbC,gBAAiB,QACjBC,OAAQ,OACRC,OAAQ,kBACRC,aAAc,SAmBHC,E,uKAdP,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,YAAYC,MAAOP,GAC9B,wBAAIM,UAAU,cAAcE,KAAKC,MAAMC,MACvC,yBAAKC,IAAKH,KAAKC,MAAMG,MAAON,UAAU,eAAeO,IAAI,QACzD,uBAAGP,UAAU,aAAaE,KAAKC,MAAMK,MACrC,uBAAGR,UAAU,aAAaE,KAAKC,MAAMM,aACrC,uBAAGT,UAAU,aAAaE,KAAKC,MAAMO,kB,GATtCC,IAAMC,WCKVC,E,uKAVP,OACI,yBAAKb,UAAU,YACVE,KAAKC,MAAMW,UAAUC,KAAI,SAAAC,GAAQ,OAC9B,kBAAC,EAAD,CAAMC,IAAKD,EAASE,GAAId,KAAMY,EAASZ,KAAMI,KAAMQ,EAASR,KAAME,WAAYM,EAASN,WAAYJ,MAAOU,EAASV,MAAOG,YAAaO,EAASP,sB,GAL7IG,aCDjBO,EAAc,CAChBC,SAAU,OACVC,MAAO,OAaIC,EAVA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACvB,OACI,6BACI,4BAAQD,QAASA,EAAStB,MAAOkB,GAC5BK,K,OC6CFC,E,4MAjDbC,MAAQ,CACNZ,UAAWA,G,EAGba,kBAAoB,SAAAC,GAAS,MAEHA,EAAMC,OAAtBzB,EAFmB,EAEnBA,KAAM0B,EAFa,EAEbA,MAGd,EAAKC,SAAL,eACG3B,EAAO0B,K,EAIZE,cAAgB,SAACC,EAAGC,GAClBC,QAAQC,IAAIH,EAAE7B,MACd,IAAMiC,EAAUJ,EAAE7B,KAAKkC,cACjBC,EAAUL,EAAE9B,KAAKkC,cAEnBE,EAAa,EAOjB,OANIH,EAAUE,EACZC,EAAa,EACJH,EAAUE,IACnBC,GAAc,GAEhBL,QAAQC,IAAII,GACLA,G,EAITC,gBAAkB,WAChB,OAAO,EAAKf,MAAMZ,UAAU4B,QAAO,SAAA1B,GAAQ,MAA4B,kBAAxBA,EAASN,e,uDAIhD,IAAD,OACP,OACE,oCACA,wDACA,iFACA,mHACE,kBAAC,EAAD,CAAQa,QAAS,kBAAM,EAAKQ,SAAS,CAACjB,UAAW,EAAKY,MAAMZ,UAAU6B,KAAK,EAAKX,mBAAhF,+BAEA,kBAAC,EAAD,CAAUlB,UAAWZ,KAAKwB,MAAMZ,iB,GA5CtBF,aCMEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.16f15554.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst divStyle = {\n    backgroundColor: \"white\",\n    margin: \"40px\",\n    border: \"10px solid grey\",\n    borderRadius: \"20px\"\n}\n\nclass Card extends React.Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <div className=\"card-body\" style={divStyle}>\n                    <h3 className=\"card-title\">{this.props.name}</h3>\n                    <img src={this.props.image} className=\"card-img-top\" alt=\"img\" />\n                    <p className=\"card-text\">{this.props.role}</p>\n                    <p className=\"card-text\">{this.props.nationality}</p>\n                    <p className=\"card-text\">{this.props.department}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Card from '../Card';\n\nclass Employee extends Component {\n    render() {\n        return (\n            <div className=\"employee\">\n                {this.props.employees.map(employee => (\n                    <Card key={employee.id} name={employee.name} role={employee.role} department={employee.department} image={employee.image} nationality={employee.nationality}/>\n                ))}\n            </div>\n        )\n    };\n};\n\nexport default Employee;","import React from 'react';\n\nconst buttonStyle = {\n    fontSize: \"20px\",\n    color: \"red\"\n}\n\nconst Button = ({ onClick, children }) => {\n    return (\n        <div>\n            <button onClick={onClick} style={buttonStyle}>\n                {children}\n            </button>\n        </div>\n    )\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport './App.css';\nimport Employee from './components/Employee';\nimport Button from './components/Button';\nimport employees from './employees.json';\n\nclass App extends Component {\n  state = {\n    employees: employees\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  sortEmployees = (a, b) => {\n    console.log(a.name);\n    const personA = a.name.toUpperCase();\n    const personB = b.name.toUpperCase();\n\n    let comparison = 0;\n    if (personA > personB) {\n      comparison = 1;\n    } else if (personA < personB) {\n      comparison = -1;\n    }\n    console.log(comparison);\n    return comparison;\n  }\n\n\n  filterEmployees = () => {\n    return this.state.employees.filter(employee => employee.department === \"Tennis Player\")\n  }\n\n\n  render() {\n    return (      \n      <>\n      <h2>TENNIS PLAYERS DIRECTORY</h2>\n      <div>Professional Tennis Players - WTA and ATP Tours.</div>\n      <h6>*WTA and ATP Tours would not disclose the players' email addresses/phone numbers :)</h6>\n        <Button onClick={() => this.setState({employees: this.state.employees.sort(this.sortEmployees)})}>Sort by Player's First Name</Button>\n        {/* <Button onClick={() => this.setState({employees: this.filterEmployees()})}>Find All Tennis Player</Button> */}\n        <Employee employees={this.state.employees} />\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}